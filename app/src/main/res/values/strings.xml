<resources>
    <string name="app_name">Portfolio</string>

    <string name="scrollview_and_relativelayout">ScrollView and RelativeLayout</string>
    <string name="framelayout">FrameLayout</string>
    <string name="spinner_array">Spinner Array</string>
    <string name="spinnerTitle">My First Yaya!</string>
    <!-- TODO: Remove or change this placeholder text -->
    <string name="hello_blank_fragment">Hello blank fragment</string>


    <string name="lorem">

        "What is Lorem Ipsum?\n\n"

        "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\n\n\n"

        "Where does it come from?\n\n"

        "Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \"Lorem ipsum dolor sit amet..\", comes from a line in section 1.10.32.\n\n\n"
        "The standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from \"de Finibus Bonorum et Malorum\" by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackham.\n\n\n"

        "Why do we use it?\n\n"

        "It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using \'Content here, content here\', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for \'lorem ipsum\' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).\n\n\n"

        "Where can I get some?\n\n"
        "There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don\'t look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn\'t anything embarrassing hidden in the middle of text. All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary, making this the first true generator on the Internet. It uses a dictionary of over 200 Latin words, combined with a handful of model sentence structures, to generate Lorem Ipsum which looks reasonable. The generated Lorem Ipsum is therefore always free from repetition, injected humour, or non-characteristic words etc.\n"



    </string>


    <string name="favFoodTitle">This is my Favourite Food</string>
    <string name="favFoodText">So my favourite food is Profiterole with Raspberries </string>

    <string name="favPetTitle">This is my Favourite Pet</string>
    <string name="favPetText">I love Tigers I can\'t have one as a pet so my favourite pet is the fat cat</string>

    <string name="favMovieTitle">This is my Favourite Movie</string>
    <string name="favMovieText">My favourite movie is The Prestige</string>
    <string name="title_activity_nav_drawer">NavDrawer</string>
    <string name="navigation_drawer_open">Open navigation drawer</string>
    <string name="navigation_drawer_close">Close navigation drawer</string>
    <string name="nav_header_title">Android Studio</string>
    <string name="nav_header_subtitle">android.studio@android.com</string>
    <string name="nav_header_desc">Navigation header</string>
    <string name="action_settings">Settings</string>

    <string name="menu_home">Home</string>
    <string name="menu_gallery">Gallery</string>
    <string name="menu_slideshow">Slideshow</string>


    <string name="fromTroubles">From now on, our troubles will be out of sight</string>
    <string name="letHeart">Let your heart be light</string>
    <string name="haveChristmas">Have yourself a merry little Christmas,</string>
    <string name="sebastian">From Sebastian</string>
    <string name="happyHoliday">Happy Holydays!</string>
    <string name="spark">Sparkling</string>
    <string name="yay">Happy Holiday!</string>
    <string name="gingleButton">Gingles Bells</string>
    <string name="snowButton">Let It Snow</string>

    <string name="secret_text_2">Secret Text 2</string>
    <string name="secret_text_1">Secret Text 1</string>
    <string name="secret_text_3">Secret Text 3</string>
    <string name="secretText">What does hide behind the buttons?</string>

    <string name="favoriteQuote">“Let me tell you something you already know. The world ain\'t all sunshine and rainbows. It\'s a very mean and nasty place and I don\'t care how tough you are it will beat you to your knees and keep you there permanently if you let it. You, me, or nobody is gonna hit as hard as life. But it ain\'t about how hard ya hit. It\'s about how hard you can get hit and keep moving forward. How much you can take and keep moving forward. That\'s how winning is done!”</string>
    <string name="favoriteQuoteAuthor">― Sylvester Stallone, Rocky Balboa</string>
    <string name="favTitle">My favourite quote</string>

    <string name="factTitle">A fact about me</string>
    <string name="factText">Well I know it\'s not okay for the cats but I love fat cats.</string>
    <string name="anotherFact">Also I love anything about AI and ML :D</string>

    <string name="favoriteImgTitle">One of my favourite images</string>
    <string name="credit">&#169; Idk it\'s from the internet :)</string>

    <string name="open_website">Open Website</string>
    <string name="websiteText">Enter the website you want to access</string>
    <string name="title">Different Intent Redirects</string>
    <string name="locationText">Enter the location you want to access</string>
    <string name="open_location">Open Location</string>
    <string name="shareText">Enter the text you want to share</string>
    <string name="share_text">Share Text</string>
    <string name="dialText">Dial the number you want to call</string>
    <string name="call_number">Call Number</string>

    <string name="another">Go to another activity</string>
    <string name="title1">First Activity</string>
    <string name="oncreate">onCreate():</string>
    <string name="onstart">onStart():</string>
    <string name="onresume">onResume():</string>
    <string name="onpause">onPause():</string>
    <string name="onstop">onStop():</string>
    <string name="ondestroy">onDestroy():</string>
    <string name="goFirst">Go back to first activity</string>
    <string name="second">Second Activity</string>


    <string name="message">Message...</string>
    <string name="send">Send</string>

    <string name="msgRec">Message Received</string>
    <string name="rplRec">Reply Received</string>




<!-- Activities descriptions -->
    <string name="viewsChallengeDesc">For this solution I\'ve also added Toast messages (and added into the Log) when the user interacted with any of the UI. I added a volume bar with Seekbar, an search bar with SearchView and a circular ProgressBar.</string>
    <string name="viewGroupsLoginDesc">For the email validation I used the Matcher and Pattern classes from java.util.regex, I used a pattern for email and compiled intro a variable that is Pattern type, after that I wrote a method that check if the introduced email matches the pattern, the method has a boolean return type.</string>
    <string name="viewsGroupsScrollArrayDesc">At this challenge for the spinner I used simple_spinner_item for the layout and I hardcoded the data-source for it in an ArrayList with Android versions, after that I wrote a simple method for the adapter.</string>

    <string name="stylesCustomDateTimePickerDesc">I know it\'s not the best design, but I tried :D.</string>
    <string name="stylesCollapsingToolbarDesc">This was a design challenge, I used CoordinatorLayout as the parent, then inside an AppBarLayout I added the CollapsingToolbarLayout which had an ImageView and a Toolbar inside. After the AppBarLayout I used a FloatingActionButton, a NestedScrollView and a TextView.</string>
    <string name="stylesCardViewHobbyDesc">Only one CardView for my hobby seemed a bit empty, so I added another one that would represent my business card.</string>
    <string name="stylesBatteryControlDesc">This project was a bit hard because I had to write .xml files for each state of the battery image. I implemented 7 values for the battery level but also two more for when it\'s empty and one for when it\'s full.</string>

    <string name="storeDataSharedPreferencesDesc">All the functionalities have been written inside the MainActivity. I used a string variable APP_KEY and keys for each type of data, then on the create method I\'ve added the textChangedListeners for the EditText fields and clickListeners for the buttons. After that I\'ve written CRUD operation methods for the SharedPreferences, such as saving the data by using the key and value, reading the data using a getter function by using the key, deleting the data by using the key and deleting everything.</string>
    <string name="storeDataProjectManagerDesc">
        "This was a pretty complex challenge. I\'ve used Room in order to perform CRUD operations on some Projects and Tasks. For the design of the Projects and Tasks I\'ve used CardView and for the images I\'ve used Vector Asset, and to display the data I\'ve used a RecyclerView. I\'ve created an abstract class named ProjectsDB who had two entities, one for projects and one for tasks, there I\'ve used the Singleton design pattern in order to obtain the instance of the class, in that case I didn\'t want to be able to create more databases with the same name, I also used a synchronized method in order to avoid conflicts with threads and because I didn\'t want to block the UI thread, this abstract class has two abstract methods projectsDao() and tasksDao. I wrote two interfaces where I wrote the queries for the CRUD operations, the interfaces were named ProjectsDao and TasksDao. After that I wrote two classes ProjectsData and TasksData which represented the tables, there I wrote the requested columns and their setters and getters, for the TasksData I\'ve also added a Boolean column, to check if the task is finished or not.\n\n"

        "To add a project, I used a click listener for the FloatingActionButton where I created a Dialog popup which had the layout of dialog_add_project.xml, that layout had an Add Project button and a Cancel button, this all happened into the MainActivity. For the add button I\'ve checked if the fields are not empty and if so, I added them into the database then I updated the adapter and closed the dialog.\n\n"

        "Inside the RecyclerView adapter for the Projects I wrote the functionality for the edit button and the delete button. For the edit one I used another Dialog object in order to create a popup window which had the same functionality as the add FloatingActionButton, and for the delete button I've wrote a function askOption which had a return type of AlertDialog where the negative button, named "Close", simply closed the popup and the positive button, named "Delete", removed the project from the database and from the adapter. When the user clicks on the Tasks button it will an Intent object will be instantiated the data about the project title, description, hours and ID will be sent to a new activity named TasksActivity.\n\n"

        "The TasksActivity have similar functionality with the MainActivity a.k.a. the Projects activity but here I made a new ArrayList, and used a foreach loop in order to parse the data source from the adapter, and if the project ID was the same with the Intent ID, I would add that task data into the new ArrayList, by doing that I'm sure that it will show only the tasks from the project I clicked on. The tasks RecyclerView adapter it's also similar to the projects adapter but I've added a functionality that if you tap on the task, the text "In Progress" will become a green text named "Done", that being possible by using the Boolean column I added into the TasksData."


    </string>
    <string name="networkingRetrofitMoviesDesc">This was one of my favorite projects from the whole course, so I wanted to combine almost everything I\'ve learned so far inside this project, so beside the Retrofit functionality I\'ve used CardView for each movie, RecyclerView to generate the list of movies and Fragments for each type of movie (top-rated, upcoming, now playing). I decided to get the title, the description, the image, the vote count, popularity for now playing movies and the release date for upcoming movies. To load the images from the URL I used Glide inside the RecyclerView adapter. I wrote a class (MovieResults) with nested classes filled with setters and getters in order to work with the data from the fetch. In the MainActivity I wrote a similar functionality with the optional challenge from the fragments course, and in the MainFragment I fetched the data from the API inside the onCreateView() method using a Retrofit instance in order to store the call for each category of movies in a different variable, after that with a switch case for the category type I wrote the functionality for the response and for the failure of the API call, in case of OK response I used a foreach loop to add the data into the RecyclerView adapter and in the end show the data for that category. For a better data visualization and to test the endpoints I used the Postman tool.</string>

    <string name="fragmentsTabsAppDesc">For this solution I used ViewPager, the .xml file for the fragments had two TextViews and one ImageView. In the MainActivity I wrote a class MainAdapter that extends the FragmentPagerAdapter, it uses two ArrayLists, one to add the title of the fragment and one to add the fragment, and I overrided the getItem(), getCount() and getPageTitle() methods. After that I wrote a method to prepare the ViewPager there I used getSupportFragmentManager() to create the MainAdapter object and I saved their titles in the Bundle object and created the fragments using a for loop. Finally in the MainFragment in the method onCreateView() I used an switch case to change the fragment content by using its title as cases.</string>
    <string name="fragmentsNavigationDrawerDesc">Nothing much to say. Just a NavigationDrawer app.</string>
<!--    <string name="fragmentSlidesDesc"></string>-->


    <string name="complexViewsStudentsDesc">At this challenge I was amazed by how useful can a RecyclerView be but also by how much code I have to write for it\'s functionality :D. I used a LinkedList for the name list and added a click functionality for each element of the data source, also, I added the option to add and to delete a student and used smoothScrollToPosition function for a better user interaction.</string>
    <string name="complexViewsRecapDesc">This was mainly a design challenge, so all the work was inside the activity_main.xml file. For the main parent view I used RelativeLayout, then for the two images I used another RelativeLayout and inside it the images had the layout_alignParentStart and layout_alignParentEnd attribute set to true. For the small line between the top images and the rest of the screen I used a simple View. For the last part, I used a FrameLayout with 3 View\'s and one ImageView.</string>
    <string name="complexViewsHolidayCardDesc">Yet another design challenge, but, this time was about the ConstraintLayout, I also used some LinearLayouts and RelativeLayouts.</string>

    <string name="activitiesAndIntentsSharedataDesc">Here I added addTextChangedListener()s for each EditText and clickListeners for each Button. For the most buttons I used Permissions. On click for the URL, I used Intent.ACTION_VIEW and I set up the data for the intent to parse for whatever the user entered. For the location I again used ACTION_VIEW and sanitized the string by adding "google.navigation:q=" in front of whatever the user introduced. For the share button I had to use ACTION_SEND, send the data to the next activity and let the user choose which application he wants to share with. Finally, for the dial button I used the ACTION_DIAL, sanitized the string to with "tel:" in front of it and set up the data to parse that Uri.</string>
    <string name="activitiesAndIntentsPassageActivityDesc">In this challenge I\'ve used a method with had a parameter of type View in order to get the ID of the button, I instantiated the Intent and then in a switch case, I checked for every ID, if the case was true it would putExtra() information for the intent with the key being a string "Button" and the value different for every button. Then in the second activity I used another switch case to check for the data sent from the Intent so I could change the information from the, TextViews and the ImageView.</string>
    <string name="activitiesAndIntentsChatAppDesc">For this challenge, in the MainActivity I used an addTextChangedListener() who would listen onTextChanged(), then an clickListener which would run a method on that would start a new activity on click and then would send the message to the next activity, I also overrided the onPause() method in order to finish the MainActivity. I did the same for the second activity.</string>
    <string name="activitiesAndIntentsActivitiesLifecycleDesc">This challenge was about studying the activities behavior, I had to override the onCreate(), onStart(), onResume(), onPause(), onStop(), and onDestroy() methods so when they were called it their equivalent TextView color will become green and it will be appended " called" to its text.</string>



</resources>